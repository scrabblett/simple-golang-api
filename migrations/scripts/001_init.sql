-- +goose Up
CREATE TABLE public.LIBRARY_USER
(
    ID         SERIAL PRIMARY KEY,
    LAST_NAME  VARCHAR(200) NOT NULL,
    FIRST_NAME VARCHAR(200) NOT NULL,
    PATRONYMIC VARCHAR(200),
    BIRTH_DATE DATE         NOT NULL,
    CREATED_AT TIMESTAMP    NOT NULL,
    EDITED_AT  TIMESTAMP    NOT NULL,
    REMOVED_AT TIMESTAMP,
    CONSTRAINT LIBRARY_USER_BIRTH_DATE_CHECK CHECK (DATE_PART('year', AGE('2024-04-11', BIRTH_DATE)) >= 6),
    CONSTRAINT LIBRARY_USER_CREATED_AT_CHECK CHECK (CREATED_AT != REMOVED_AT)
);

CREATE TABLE public.BOOK
(
    ID              SERIAL PRIMARY KEY,
    TITLE           VARCHAR(250)  NOT NULL,
    DESCRIPTION     VARCHAR(1000) NOT NULL,
    AGE_GROUP       VARCHAR(5)    NOT NULL,
    PUBLISHING_DATE DATE          NOT NULL
);

CREATE TABLE public.AGE_GROUPS
(
    GROUP_AGE  INT PRIMARY KEY,
    GROUP_NAME VARCHAR(100)
);

CREATE TABLE USERS_BOOKS
(
    ID          SERIAL PRIMARY KEY,
    USER_ID     BIGINT
        CONSTRAINT USER_BOOKS_FK1 REFERENCES LIBRARY_USER (ID),
    BOOK_ID     BIGINT
        CONSTRAINT USER_BOOKS_FK2 REFERENCES BOOK (ID),
    ISSUED_AT   DATE NOT NULL default current_date,
    RETURNED_AT DATE
        CONSTRAINT USERS_BOOKS_DATES_CHECK CHECK (ISSUED_AT < RETURNED_AT)
);

CREATE TABLE USERS_INFO
(
    ID       SERIAL PRIMARY KEY,
    LOGIN    VARCHAR(200) NOT NULL,
    PASSWORD bytea        NOT NULL,
    SALT     bytea        NOT NULL,
    USER_ID  BIGINT       NOT NULL
        CONSTRAINT USERS_INFO_FK1 REFERENCES LIBRARY_USER (ID)
);

CREATE TABLE USERS_TOKENS
(
    ID         SERIAL PRIMARY KEY,
    TOKEN      VARCHAR(1000) NOT NULL,
    EXPIRED_AT TIMESTAMP     NOT NULL,
    USER_ID    BIGINT        NOT NULL
        CONSTRAINT USERS_TOKENS_FK1 REFERENCES LIBRARY_USER (ID)
);