// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"
	model "simple-golang-api/internal/repository/users/model"

	mock "github.com/stretchr/testify/mock"
)

// UsersRepo is an autogenerated mock type for the UsersRepo type
type UsersRepo struct {
	mock.Mock
}

// GetJWTToken provides a mock function with given fields: ctx, userId
func (_m *UsersRepo) GetJWTToken(ctx context.Context, userId int64) (string, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetJWTToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (string, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) string); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserCredentials provides a mock function with given fields: ctx, login
func (_m *UsersRepo) GetUserCredentials(ctx context.Context, login string) (model.UserCredentials, error) {
	ret := _m.Called(ctx, login)

	if len(ret) == 0 {
		panic("no return value specified for GetUserCredentials")
	}

	var r0 model.UserCredentials
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.UserCredentials, error)); ok {
		return rf(ctx, login)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.UserCredentials); ok {
		r0 = rf(ctx, login)
	} else {
		r0 = ret.Get(0).(model.UserCredentials)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveJWTToken provides a mock function with given fields: ctx, userId, jwt
func (_m *UsersRepo) SaveJWTToken(ctx context.Context, userId int64, jwt string) error {
	ret := _m.Called(ctx, userId, jwt)

	if len(ret) == 0 {
		panic("no return value specified for SaveJWTToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, userId, jwt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUserCredentials provides a mock function with given fields: ctx, userInfo
func (_m *UsersRepo) SaveUserCredentials(ctx context.Context, userInfo *model.SignUpUser) (int64, error) {
	ret := _m.Called(ctx, userInfo)

	if len(ret) == 0 {
		panic("no return value specified for SaveUserCredentials")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.SignUpUser) (int64, error)); ok {
		return rf(ctx, userInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.SignUpUser) int64); ok {
		r0 = rf(ctx, userInfo)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.SignUpUser) error); ok {
		r1 = rf(ctx, userInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsersRepo creates a new instance of UsersRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersRepo {
	mock := &UsersRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
